package com.company.world.world.world.country.generated;

import com.company.world.world.world.country.Country;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.world.world.world.country.Country}-interface representing
 * entities of the {@code country}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCountry {
    
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getCode()} method.
     */
    StringField<Country, String> CODE = StringField.create(
        Identifier.CODE,
        Country::getCode,
        Country::setCode,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getName()} method.
     */
    StringField<Country, String> NAME = StringField.create(
        Identifier.NAME,
        Country::getName,
        Country::setName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getContinent()} method.
     */
    StringField<Country, String> CONTINENT = StringField.create(
        Identifier.CONTINENT,
        Country::getContinent,
        Country::setContinent,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getRegion()} method.
     */
    StringField<Country, String> REGION = StringField.create(
        Identifier.REGION,
        Country::getRegion,
        Country::setRegion,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getSurfaceArea()} method.
     */
    DoubleField<Country, Double> SURFACE_AREA = DoubleField.create(
        Identifier.SURFACE_AREA,
        Country::getSurfaceArea,
        Country::setSurfaceArea,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getIndepYear()} method.
     */
    ComparableField<Country, Short, Short> INDEP_YEAR = ComparableField.create(
        Identifier.INDEP_YEAR,
        o -> OptionalUtil.unwrap(o.getIndepYear()),
        Country::setIndepYear,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getPopulation()} method.
     */
    IntField<Country, Integer> POPULATION = IntField.create(
        Identifier.POPULATION,
        Country::getPopulation,
        Country::setPopulation,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getLifeExpectancy()} method.
     */
    ComparableField<Country, Double, Double> LIFE_EXPECTANCY = ComparableField.create(
        Identifier.LIFE_EXPECTANCY,
        o -> OptionalUtil.unwrap(o.getLifeExpectancy()),
        Country::setLifeExpectancy,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getGnp()} method.
     */
    ComparableField<Country, Double, Double> GNP = ComparableField.create(
        Identifier.GNP,
        o -> OptionalUtil.unwrap(o.getGnp()),
        Country::setGnp,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getGnpold()} method.
     */
    ComparableField<Country, Double, Double> GNPOLD = ComparableField.create(
        Identifier.GNPOLD,
        o -> OptionalUtil.unwrap(o.getGnpold()),
        Country::setGnpold,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getLocalName()} method.
     */
    StringField<Country, String> LOCAL_NAME = StringField.create(
        Identifier.LOCAL_NAME,
        Country::getLocalName,
        Country::setLocalName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getGovernmentForm()} method.
     */
    StringField<Country, String> GOVERNMENT_FORM = StringField.create(
        Identifier.GOVERNMENT_FORM,
        Country::getGovernmentForm,
        Country::setGovernmentForm,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getHeadOfState()} method.
     */
    StringField<Country, String> HEAD_OF_STATE = StringField.create(
        Identifier.HEAD_OF_STATE,
        o -> OptionalUtil.unwrap(o.getHeadOfState()),
        Country::setHeadOfState,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getCapital()} method.
     */
    ComparableField<Country, Integer, Integer> CAPITAL = ComparableField.create(
        Identifier.CAPITAL,
        o -> OptionalUtil.unwrap(o.getCapital()),
        Country::setCapital,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Country} field that can be obtained
     * using the {@link Country#getCode2()} method.
     */
    StringField<Country, String> CODE2 = StringField.create(
        Identifier.CODE2,
        Country::getCode2,
        Country::setCode2,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the code of this Country. The code field corresponds to the
     * database column world.world.country.Code.
     * 
     * @return the code of this Country
     */
    String getCode();
    
    /**
     * Returns the name of this Country. The name field corresponds to the
     * database column world.world.country.Name.
     * 
     * @return the name of this Country
     */
    String getName();
    
    /**
     * Returns the continent of this Country. The continent field corresponds to
     * the database column world.world.country.Continent.
     * 
     * @return the continent of this Country
     */
    String getContinent();
    
    /**
     * Returns the region of this Country. The region field corresponds to the
     * database column world.world.country.Region.
     * 
     * @return the region of this Country
     */
    String getRegion();
    
    /**
     * Returns the surfaceArea of this Country. The surfaceArea field
     * corresponds to the database column world.world.country.SurfaceArea.
     * 
     * @return the surfaceArea of this Country
     */
    double getSurfaceArea();
    
    /**
     * Returns the indepYear of this Country. The indepYear field corresponds to
     * the database column world.world.country.IndepYear.
     * 
     * @return the indepYear of this Country
     */
    Optional<Short> getIndepYear();
    
    /**
     * Returns the population of this Country. The population field corresponds
     * to the database column world.world.country.Population.
     * 
     * @return the population of this Country
     */
    int getPopulation();
    
    /**
     * Returns the lifeExpectancy of this Country. The lifeExpectancy field
     * corresponds to the database column world.world.country.LifeExpectancy.
     * 
     * @return the lifeExpectancy of this Country
     */
    OptionalDouble getLifeExpectancy();
    
    /**
     * Returns the gnp of this Country. The gnp field corresponds to the
     * database column world.world.country.GNP.
     * 
     * @return the gnp of this Country
     */
    OptionalDouble getGnp();
    
    /**
     * Returns the gnpold of this Country. The gnpold field corresponds to the
     * database column world.world.country.GNPOld.
     * 
     * @return the gnpold of this Country
     */
    OptionalDouble getGnpold();
    
    /**
     * Returns the localName of this Country. The localName field corresponds to
     * the database column world.world.country.LocalName.
     * 
     * @return the localName of this Country
     */
    String getLocalName();
    
    /**
     * Returns the governmentForm of this Country. The governmentForm field
     * corresponds to the database column world.world.country.GovernmentForm.
     * 
     * @return the governmentForm of this Country
     */
    String getGovernmentForm();
    
    /**
     * Returns the headOfState of this Country. The headOfState field
     * corresponds to the database column world.world.country.HeadOfState.
     * 
     * @return the headOfState of this Country
     */
    Optional<String> getHeadOfState();
    
    /**
     * Returns the capital of this Country. The capital field corresponds to the
     * database column world.world.country.Capital.
     * 
     * @return the capital of this Country
     */
    OptionalInt getCapital();
    
    /**
     * Returns the code2 of this Country. The code2 field corresponds to the
     * database column world.world.country.Code2.
     * 
     * @return the code2 of this Country
     */
    String getCode2();
    
    /**
     * Sets the code of this Country. The code field corresponds to the database
     * column world.world.country.Code.
     * 
     * @param code to set of this Country
     * @return     this Country instance
     */
    Country setCode(String code);
    
    /**
     * Sets the name of this Country. The name field corresponds to the database
     * column world.world.country.Name.
     * 
     * @param name to set of this Country
     * @return     this Country instance
     */
    Country setName(String name);
    
    /**
     * Sets the continent of this Country. The continent field corresponds to
     * the database column world.world.country.Continent.
     * 
     * @param continent to set of this Country
     * @return          this Country instance
     */
    Country setContinent(String continent);
    
    /**
     * Sets the region of this Country. The region field corresponds to the
     * database column world.world.country.Region.
     * 
     * @param region to set of this Country
     * @return       this Country instance
     */
    Country setRegion(String region);
    
    /**
     * Sets the surfaceArea of this Country. The surfaceArea field corresponds
     * to the database column world.world.country.SurfaceArea.
     * 
     * @param surfaceArea to set of this Country
     * @return            this Country instance
     */
    Country setSurfaceArea(double surfaceArea);
    
    /**
     * Sets the indepYear of this Country. The indepYear field corresponds to
     * the database column world.world.country.IndepYear.
     * 
     * @param indepYear to set of this Country
     * @return          this Country instance
     */
    Country setIndepYear(Short indepYear);
    
    /**
     * Sets the population of this Country. The population field corresponds to
     * the database column world.world.country.Population.
     * 
     * @param population to set of this Country
     * @return           this Country instance
     */
    Country setPopulation(int population);
    
    /**
     * Sets the lifeExpectancy of this Country. The lifeExpectancy field
     * corresponds to the database column world.world.country.LifeExpectancy.
     * 
     * @param lifeExpectancy to set of this Country
     * @return               this Country instance
     */
    Country setLifeExpectancy(Double lifeExpectancy);
    
    /**
     * Sets the gnp of this Country. The gnp field corresponds to the database
     * column world.world.country.GNP.
     * 
     * @param gnp to set of this Country
     * @return    this Country instance
     */
    Country setGnp(Double gnp);
    
    /**
     * Sets the gnpold of this Country. The gnpold field corresponds to the
     * database column world.world.country.GNPOld.
     * 
     * @param gnpold to set of this Country
     * @return       this Country instance
     */
    Country setGnpold(Double gnpold);
    
    /**
     * Sets the localName of this Country. The localName field corresponds to
     * the database column world.world.country.LocalName.
     * 
     * @param localName to set of this Country
     * @return          this Country instance
     */
    Country setLocalName(String localName);
    
    /**
     * Sets the governmentForm of this Country. The governmentForm field
     * corresponds to the database column world.world.country.GovernmentForm.
     * 
     * @param governmentForm to set of this Country
     * @return               this Country instance
     */
    Country setGovernmentForm(String governmentForm);
    
    /**
     * Sets the headOfState of this Country. The headOfState field corresponds
     * to the database column world.world.country.HeadOfState.
     * 
     * @param headOfState to set of this Country
     * @return            this Country instance
     */
    Country setHeadOfState(String headOfState);
    
    /**
     * Sets the capital of this Country. The capital field corresponds to the
     * database column world.world.country.Capital.
     * 
     * @param capital to set of this Country
     * @return        this Country instance
     */
    Country setCapital(Integer capital);
    
    /**
     * Sets the code2 of this Country. The code2 field corresponds to the
     * database column world.world.country.Code2.
     * 
     * @param code2 to set of this Country
     * @return      this Country instance
     */
    Country setCode2(String code2);
    
    enum Identifier implements ColumnIdentifier<Country> {
        
        CODE            ("Code"),
        NAME            ("Name"),
        CONTINENT       ("Continent"),
        REGION          ("Region"),
        SURFACE_AREA    ("SurfaceArea"),
        INDEP_YEAR      ("IndepYear"),
        POPULATION      ("Population"),
        LIFE_EXPECTANCY ("LifeExpectancy"),
        GNP             ("GNP"),
        GNPOLD          ("GNPOld"),
        LOCAL_NAME      ("LocalName"),
        GOVERNMENT_FORM ("GovernmentForm"),
        HEAD_OF_STATE   ("HeadOfState"),
        CAPITAL         ("Capital"),
        CODE2           ("Code2");
        
        private final String columnName;
        private final TableIdentifier<Country> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "world";
        }
        
        @Override
        public String getSchemaName() {
            return "world";
        }
        
        @Override
        public String getTableName() {
            return "country";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Country> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}