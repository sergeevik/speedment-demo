package com.company.world.world.world.countrylanguage.generated;

import com.company.world.world.world.country.Country;
import com.company.world.world.world.countrylanguage.Countrylanguage;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.world.world.world.countrylanguage.Countrylanguage}-interface
 * representing entities of the {@code countrylanguage}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCountrylanguage {
    
    /**
     * This Field corresponds to the {@link Countrylanguage} field that can be
     * obtained using the {@link Countrylanguage#getCountryCode()} method.
     */
    StringForeignKeyField<Countrylanguage, String, Country> COUNTRY_CODE = StringForeignKeyField.create(
        Identifier.COUNTRY_CODE,
        Countrylanguage::getCountryCode,
        Countrylanguage::setCountryCode,
        Country.CODE,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Countrylanguage} field that can be
     * obtained using the {@link Countrylanguage#getLanguage()} method.
     */
    StringField<Countrylanguage, String> LANGUAGE = StringField.create(
        Identifier.LANGUAGE,
        Countrylanguage::getLanguage,
        Countrylanguage::setLanguage,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Countrylanguage} field that can be
     * obtained using the {@link Countrylanguage#getIsOfficial()} method.
     */
    StringField<Countrylanguage, String> IS_OFFICIAL = StringField.create(
        Identifier.IS_OFFICIAL,
        Countrylanguage::getIsOfficial,
        Countrylanguage::setIsOfficial,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Countrylanguage} field that can be
     * obtained using the {@link Countrylanguage#getPercentage()} method.
     */
    DoubleField<Countrylanguage, Double> PERCENTAGE = DoubleField.create(
        Identifier.PERCENTAGE,
        Countrylanguage::getPercentage,
        Countrylanguage::setPercentage,
        TypeMapper.primitive(), 
        false
    );
    
    /**
     * Returns the countryCode of this Countrylanguage. The countryCode field
     * corresponds to the database column
     * world.world.countrylanguage.CountryCode.
     * 
     * @return the countryCode of this Countrylanguage
     */
    String getCountryCode();
    
    /**
     * Returns the language of this Countrylanguage. The language field
     * corresponds to the database column world.world.countrylanguage.Language.
     * 
     * @return the language of this Countrylanguage
     */
    String getLanguage();
    
    /**
     * Returns the isOfficial of this Countrylanguage. The isOfficial field
     * corresponds to the database column
     * world.world.countrylanguage.IsOfficial.
     * 
     * @return the isOfficial of this Countrylanguage
     */
    String getIsOfficial();
    
    /**
     * Returns the percentage of this Countrylanguage. The percentage field
     * corresponds to the database column
     * world.world.countrylanguage.Percentage.
     * 
     * @return the percentage of this Countrylanguage
     */
    double getPercentage();
    
    /**
     * Sets the countryCode of this Countrylanguage. The countryCode field
     * corresponds to the database column
     * world.world.countrylanguage.CountryCode.
     * 
     * @param countryCode to set of this Countrylanguage
     * @return            this Countrylanguage instance
     */
    Countrylanguage setCountryCode(String countryCode);
    
    /**
     * Sets the language of this Countrylanguage. The language field corresponds
     * to the database column world.world.countrylanguage.Language.
     * 
     * @param language to set of this Countrylanguage
     * @return         this Countrylanguage instance
     */
    Countrylanguage setLanguage(String language);
    
    /**
     * Sets the isOfficial of this Countrylanguage. The isOfficial field
     * corresponds to the database column
     * world.world.countrylanguage.IsOfficial.
     * 
     * @param isOfficial to set of this Countrylanguage
     * @return           this Countrylanguage instance
     */
    Countrylanguage setIsOfficial(String isOfficial);
    
    /**
     * Sets the percentage of this Countrylanguage. The percentage field
     * corresponds to the database column
     * world.world.countrylanguage.Percentage.
     * 
     * @param percentage to set of this Countrylanguage
     * @return           this Countrylanguage instance
     */
    Countrylanguage setPercentage(double percentage);
    
    /**
     * Queries the specified manager for the referenced Country. If no such
     * Country exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Country findCountryCode(Manager<Country> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Countrylanguage> {
        
        COUNTRY_CODE ("CountryCode"),
        LANGUAGE     ("Language"),
        IS_OFFICIAL  ("IsOfficial"),
        PERCENTAGE   ("Percentage");
        
        private final String columnName;
        private final TableIdentifier<Countrylanguage> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "world";
        }
        
        @Override
        public String getSchemaName() {
            return "world";
        }
        
        @Override
        public String getTableName() {
            return "countrylanguage";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Countrylanguage> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}