package com.company.world.world.world.countrylanguage.generated;

import com.company.world.world.world.country.Country;
import com.company.world.world.world.countrylanguage.Countrylanguage;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.world.world.world.countrylanguage.Countrylanguage}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCountrylanguageImpl implements Countrylanguage {
    
    private String countryCode;
    private String language;
    private String isOfficial;
    private double percentage;
    
    protected GeneratedCountrylanguageImpl() {
        
    }
    
    @Override
    public String getCountryCode() {
        return countryCode;
    }
    
    @Override
    public String getLanguage() {
        return language;
    }
    
    @Override
    public String getIsOfficial() {
        return isOfficial;
    }
    
    @Override
    public double getPercentage() {
        return percentage;
    }
    
    @Override
    public Countrylanguage setCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    @Override
    public Countrylanguage setLanguage(String language) {
        this.language = language;
        return this;
    }
    
    @Override
    public Countrylanguage setIsOfficial(String isOfficial) {
        this.isOfficial = isOfficial;
        return this;
    }
    
    @Override
    public Countrylanguage setPercentage(double percentage) {
        this.percentage = percentage;
        return this;
    }
    
    @Override
    public Country findCountryCode(Manager<Country> foreignManager) {
        return foreignManager.stream().filter(Country.CODE.equal(getCountryCode())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("countryCode = " + Objects.toString(getCountryCode()));
        sj.add("language = "    + Objects.toString(getLanguage()));
        sj.add("isOfficial = "  + Objects.toString(getIsOfficial()));
        sj.add("percentage = "  + Objects.toString(getPercentage()));
        return "CountrylanguageImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Countrylanguage)) { return false; }
        final Countrylanguage thatCountrylanguage = (Countrylanguage)that;
        if (!Objects.equals(this.getCountryCode(), thatCountrylanguage.getCountryCode())) {return false; }
        if (!Objects.equals(this.getLanguage(), thatCountrylanguage.getLanguage())) {return false; }
        if (!Objects.equals(this.getIsOfficial(), thatCountrylanguage.getIsOfficial())) {return false; }
        if (this.getPercentage() != thatCountrylanguage.getPercentage()) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCountryCode());
        hash = 31 * hash + Objects.hashCode(getLanguage());
        hash = 31 * hash + Objects.hashCode(getIsOfficial());
        hash = 31 * hash + Double.hashCode(getPercentage());
        return hash;
    }
}