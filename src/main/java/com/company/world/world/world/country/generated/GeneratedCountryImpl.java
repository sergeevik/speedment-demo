package com.company.world.world.world.country.generated;

import com.company.world.world.world.country.Country;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.world.world.world.country.Country}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCountryImpl implements Country {
    
    private String code;
    private String name;
    private String continent;
    private String region;
    private double surfaceArea;
    private Short indepYear;
    private int population;
    private Double lifeExpectancy;
    private Double gnp;
    private Double gnpold;
    private String localName;
    private String governmentForm;
    private String headOfState;
    private Integer capital;
    private String code2;
    
    protected GeneratedCountryImpl() {
        
    }
    
    @Override
    public String getCode() {
        return code;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getContinent() {
        return continent;
    }
    
    @Override
    public String getRegion() {
        return region;
    }
    
    @Override
    public double getSurfaceArea() {
        return surfaceArea;
    }
    
    @Override
    public Optional<Short> getIndepYear() {
        return Optional.ofNullable(indepYear);
    }
    
    @Override
    public int getPopulation() {
        return population;
    }
    
    @Override
    public OptionalDouble getLifeExpectancy() {
        return OptionalUtil.ofNullable(lifeExpectancy);
    }
    
    @Override
    public OptionalDouble getGnp() {
        return OptionalUtil.ofNullable(gnp);
    }
    
    @Override
    public OptionalDouble getGnpold() {
        return OptionalUtil.ofNullable(gnpold);
    }
    
    @Override
    public String getLocalName() {
        return localName;
    }
    
    @Override
    public String getGovernmentForm() {
        return governmentForm;
    }
    
    @Override
    public Optional<String> getHeadOfState() {
        return Optional.ofNullable(headOfState);
    }
    
    @Override
    public OptionalInt getCapital() {
        return OptionalUtil.ofNullable(capital);
    }
    
    @Override
    public String getCode2() {
        return code2;
    }
    
    @Override
    public Country setCode(String code) {
        this.code = code;
        return this;
    }
    
    @Override
    public Country setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Country setContinent(String continent) {
        this.continent = continent;
        return this;
    }
    
    @Override
    public Country setRegion(String region) {
        this.region = region;
        return this;
    }
    
    @Override
    public Country setSurfaceArea(double surfaceArea) {
        this.surfaceArea = surfaceArea;
        return this;
    }
    
    @Override
    public Country setIndepYear(Short indepYear) {
        this.indepYear = indepYear;
        return this;
    }
    
    @Override
    public Country setPopulation(int population) {
        this.population = population;
        return this;
    }
    
    @Override
    public Country setLifeExpectancy(Double lifeExpectancy) {
        this.lifeExpectancy = lifeExpectancy;
        return this;
    }
    
    @Override
    public Country setGnp(Double gnp) {
        this.gnp = gnp;
        return this;
    }
    
    @Override
    public Country setGnpold(Double gnpold) {
        this.gnpold = gnpold;
        return this;
    }
    
    @Override
    public Country setLocalName(String localName) {
        this.localName = localName;
        return this;
    }
    
    @Override
    public Country setGovernmentForm(String governmentForm) {
        this.governmentForm = governmentForm;
        return this;
    }
    
    @Override
    public Country setHeadOfState(String headOfState) {
        this.headOfState = headOfState;
        return this;
    }
    
    @Override
    public Country setCapital(Integer capital) {
        this.capital = capital;
        return this;
    }
    
    @Override
    public Country setCode2(String code2) {
        this.code2 = code2;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("code = "           + Objects.toString(getCode()));
        sj.add("name = "           + Objects.toString(getName()));
        sj.add("continent = "      + Objects.toString(getContinent()));
        sj.add("region = "         + Objects.toString(getRegion()));
        sj.add("surfaceArea = "    + Objects.toString(getSurfaceArea()));
        sj.add("indepYear = "      + Objects.toString(OptionalUtil.unwrap(getIndepYear())));
        sj.add("population = "     + Objects.toString(getPopulation()));
        sj.add("lifeExpectancy = " + Objects.toString(OptionalUtil.unwrap(getLifeExpectancy())));
        sj.add("gnp = "            + Objects.toString(OptionalUtil.unwrap(getGnp())));
        sj.add("gnpold = "         + Objects.toString(OptionalUtil.unwrap(getGnpold())));
        sj.add("localName = "      + Objects.toString(getLocalName()));
        sj.add("governmentForm = " + Objects.toString(getGovernmentForm()));
        sj.add("headOfState = "    + Objects.toString(OptionalUtil.unwrap(getHeadOfState())));
        sj.add("capital = "        + Objects.toString(OptionalUtil.unwrap(getCapital())));
        sj.add("code2 = "          + Objects.toString(getCode2()));
        return "CountryImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Country)) { return false; }
        final Country thatCountry = (Country)that;
        if (!Objects.equals(this.getCode(), thatCountry.getCode())) {return false; }
        if (!Objects.equals(this.getName(), thatCountry.getName())) {return false; }
        if (!Objects.equals(this.getContinent(), thatCountry.getContinent())) {return false; }
        if (!Objects.equals(this.getRegion(), thatCountry.getRegion())) {return false; }
        if (this.getSurfaceArea() != thatCountry.getSurfaceArea()) {return false; }
        if (!Objects.equals(this.getIndepYear(), thatCountry.getIndepYear())) {return false; }
        if (this.getPopulation() != thatCountry.getPopulation()) {return false; }
        if (!Objects.equals(this.getLifeExpectancy(), thatCountry.getLifeExpectancy())) {return false; }
        if (!Objects.equals(this.getGnp(), thatCountry.getGnp())) {return false; }
        if (!Objects.equals(this.getGnpold(), thatCountry.getGnpold())) {return false; }
        if (!Objects.equals(this.getLocalName(), thatCountry.getLocalName())) {return false; }
        if (!Objects.equals(this.getGovernmentForm(), thatCountry.getGovernmentForm())) {return false; }
        if (!Objects.equals(this.getHeadOfState(), thatCountry.getHeadOfState())) {return false; }
        if (!Objects.equals(this.getCapital(), thatCountry.getCapital())) {return false; }
        if (!Objects.equals(this.getCode2(), thatCountry.getCode2())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCode());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getContinent());
        hash = 31 * hash + Objects.hashCode(getRegion());
        hash = 31 * hash + Double.hashCode(getSurfaceArea());
        hash = 31 * hash + Objects.hashCode(getIndepYear());
        hash = 31 * hash + Integer.hashCode(getPopulation());
        hash = 31 * hash + Objects.hashCode(getLifeExpectancy());
        hash = 31 * hash + Objects.hashCode(getGnp());
        hash = 31 * hash + Objects.hashCode(getGnpold());
        hash = 31 * hash + Objects.hashCode(getLocalName());
        hash = 31 * hash + Objects.hashCode(getGovernmentForm());
        hash = 31 * hash + Objects.hashCode(getHeadOfState());
        hash = 31 * hash + Objects.hashCode(getCapital());
        hash = 31 * hash + Objects.hashCode(getCode2());
        return hash;
    }
}