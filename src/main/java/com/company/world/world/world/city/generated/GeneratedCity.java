package com.company.world.world.world.city.generated;

import com.company.world.world.world.city.City;
import com.company.world.world.world.country.Country;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.world.world.world.city.City}-interface representing entities of
 * the {@code city}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCity {
    
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getId()} method.
     */
    IntField<City, Integer> ID = IntField.create(
        Identifier.ID,
        City::getId,
        City::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getName()} method.
     */
    StringField<City, String> NAME = StringField.create(
        Identifier.NAME,
        City::getName,
        City::setName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getCountryCode()} method.
     */
    StringForeignKeyField<City, String, Country> COUNTRY_CODE = StringForeignKeyField.create(
        Identifier.COUNTRY_CODE,
        City::getCountryCode,
        City::setCountryCode,
        Country.CODE,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getDistrict()} method.
     */
    StringField<City, String> DISTRICT = StringField.create(
        Identifier.DISTRICT,
        City::getDistrict,
        City::setDistrict,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getPopulation()} method.
     */
    IntField<City, Integer> POPULATION = IntField.create(
        Identifier.POPULATION,
        City::getPopulation,
        City::setPopulation,
        TypeMapper.primitive(), 
        false
    );
    
    /**
     * Returns the id of this City. The id field corresponds to the database
     * column world.world.city.ID.
     * 
     * @return the id of this City
     */
    int getId();
    
    /**
     * Returns the name of this City. The name field corresponds to the database
     * column world.world.city.Name.
     * 
     * @return the name of this City
     */
    String getName();
    
    /**
     * Returns the countryCode of this City. The countryCode field corresponds
     * to the database column world.world.city.CountryCode.
     * 
     * @return the countryCode of this City
     */
    String getCountryCode();
    
    /**
     * Returns the district of this City. The district field corresponds to the
     * database column world.world.city.District.
     * 
     * @return the district of this City
     */
    String getDistrict();
    
    /**
     * Returns the population of this City. The population field corresponds to
     * the database column world.world.city.Population.
     * 
     * @return the population of this City
     */
    int getPopulation();
    
    /**
     * Sets the id of this City. The id field corresponds to the database column
     * world.world.city.ID.
     * 
     * @param id to set of this City
     * @return   this City instance
     */
    City setId(int id);
    
    /**
     * Sets the name of this City. The name field corresponds to the database
     * column world.world.city.Name.
     * 
     * @param name to set of this City
     * @return     this City instance
     */
    City setName(String name);
    
    /**
     * Sets the countryCode of this City. The countryCode field corresponds to
     * the database column world.world.city.CountryCode.
     * 
     * @param countryCode to set of this City
     * @return            this City instance
     */
    City setCountryCode(String countryCode);
    
    /**
     * Sets the district of this City. The district field corresponds to the
     * database column world.world.city.District.
     * 
     * @param district to set of this City
     * @return         this City instance
     */
    City setDistrict(String district);
    
    /**
     * Sets the population of this City. The population field corresponds to the
     * database column world.world.city.Population.
     * 
     * @param population to set of this City
     * @return           this City instance
     */
    City setPopulation(int population);
    
    /**
     * Queries the specified manager for the referenced Country. If no such
     * Country exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Country findCountryCode(Manager<Country> foreignManager);
    
    enum Identifier implements ColumnIdentifier<City> {
        
        ID           ("ID"),
        NAME         ("Name"),
        COUNTRY_CODE ("CountryCode"),
        DISTRICT     ("District"),
        POPULATION   ("Population");
        
        private final String columnName;
        private final TableIdentifier<City> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "world";
        }
        
        @Override
        public String getSchemaName() {
            return "world";
        }
        
        @Override
        public String getTableName() {
            return "city";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<City> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}