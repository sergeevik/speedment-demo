package com.company.world.world.world.country.generated;

import com.company.world.world.world.country.Country;
import com.company.world.world.world.country.CountryImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.world.world.world.country.Country} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCountrySqlAdapter {
    
    private final TableIdentifier<Country> tableIdentifier;
    
    protected GeneratedCountrySqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("world", "world", "country");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Country apply(ResultSet resultSet) throws SpeedmentException {
        final Country entity = createEntity();
        try {
            entity.setCode(           resultSet.getString(1)   );
            entity.setName(           resultSet.getString(2)   );
            entity.setContinent(      resultSet.getString(3)   );
            entity.setRegion(         resultSet.getString(4)   );
            entity.setSurfaceArea(    resultSet.getDouble(5)   );
            entity.setIndepYear(      getShort(resultSet, 6)   );
            entity.setPopulation(     resultSet.getInt(7)      );
            entity.setLifeExpectancy( getDouble(resultSet, 8)  );
            entity.setGnp(            getDouble(resultSet, 9)  );
            entity.setGnpold(         getDouble(resultSet, 10) );
            entity.setLocalName(      resultSet.getString(11)  );
            entity.setGovernmentForm( resultSet.getString(12)  );
            entity.setHeadOfState(    resultSet.getString(13)  );
            entity.setCapital(        getInt(resultSet, 14)    );
            entity.setCode2(          resultSet.getString(15)  );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected CountryImpl createEntity() {
        return new CountryImpl();
    }
}