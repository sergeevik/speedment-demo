package com.company.world.generated;

import com.company.world.WorldApplication;
import com.company.world.WorldApplicationBuilder;
import com.company.world.WorldApplicationImpl;
import com.company.world.world.world.city.CityManagerImpl;
import com.company.world.world.world.city.CitySqlAdapter;
import com.company.world.world.world.country.CountryManagerImpl;
import com.company.world.world.world.country.CountrySqlAdapter;
import com.company.world.world.world.countrylanguage.CountrylanguageManagerImpl;
import com.company.world.world.world.countrylanguage.CountrylanguageSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.core.internal.AbstractApplicationBuilder;

/**
 * A generated base {@link
 * com.speedment.runtime.core.internal.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named world.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedWorldApplicationBuilder extends AbstractApplicationBuilder<WorldApplication, WorldApplicationBuilder> {
    
    protected GeneratedWorldApplicationBuilder() {
        super(WorldApplicationImpl.class, GeneratedWorldMetadata.class);
        withManager(CityManagerImpl.class);
        withManager(CountryManagerImpl.class);
        withManager(CountrylanguageManagerImpl.class);
        withComponent(CitySqlAdapter.class);
        withComponent(CountrySqlAdapter.class);
        withComponent(CountrylanguageSqlAdapter.class);
    }
    
    @Override
    public WorldApplication build(Injector injector) {
        return injector.getOrThrow(WorldApplication.class);
    }
}